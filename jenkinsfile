node {
	try  {
		notify('Job Started')

		stage('Git-Checkout') {
			git 'https://github.com/imbhascker13/ansi-terr.git'
		}

stage('Download package from JFrog') {
			def server= Artifactory.server 'Artifactory'
			def downloadSpec = """{
            "files": [
            {
                "pattern": "Bikes/Bikes-0.0.1-SNAPSHOT.war",
                "target": "./capstoneproject.war"
            }
            ]
            }"""
			server.download(downloadSpec)
		}


		stage('AWS - Production Server Provisioning'){
			sh label: 'terraform', script: 'sudo /bin/terraform  init'
			sh label: 'terraform', script: 'sudo /bin/terraform  apply -input=false -auto-approve'
		}

		
		/*stage('Deployment into production'){
			sh label: 'terraform', script: 'ansible-playbook  --key /home/mtadminnuvepro/.ssh/bike.pem -i inventory ./web-playbook.yaml -u ubuntu -v'
		}*/


		notify('Job Completed')
	} catch (err) {
		notify("Error ${err}")
		currentBuild.result = 'FAILURE'
	}
}



def notify(status){
	emailext (
			to: "bhaskarreddygbr7@gmail.com",
			subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
			body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
			)
}
